name: Daily Portfolio Management

on:
  schedule:
    # Run Monday-Friday at 4:30 PM ET (after market close)
    - cron: '30 21 * * 1-5'
  workflow_dispatch: # Allow manual triggers

jobs:
  portfolio-management:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install alpaca-trade-api pandas numpy requests warnings
        
    - name: Run Alpaca Sync (Check Stop Losses)
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        echo "=== Step 1: Check for Stop Loss Executions ==="
        python alpaca_sync.py
        
    - name: Update Daily Portfolio Data
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        echo "=== Step 2: Update Portfolio Data ==="
        python main.py
        
    - name: Update Trailing Stops
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        echo "=== Step 3: Update Trailing Stops ==="
        python trailing_stops.py
        
    - name: Update Alpaca Stop Orders
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        echo "=== Step 4: Update Stop Orders on Alpaca ==="
        python order_management.py update_trailing
        
    - name: Check Order Status
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        echo "=== Step 5: Check Order Status ==="
        python order_management.py status
        
    - name: Commit and Push Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/latest.json
        git add data/portfolio_history.csv
        git add data/trailing_stops.json
        git add logs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Daily portfolio update $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        fi

  risk-monitoring:
    runs-on: ubuntu-latest
    needs: portfolio-management
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: main # Get latest changes from portfolio-management job
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Dependencies
      run: |
        pip install pandas numpy
        
    - name: Risk Assessment
      run: |
        echo "=== Daily Risk Assessment ==="
        python -c "
        import json
        
        # Load portfolio data
        with open('docs/latest.json', 'r') as f:
            data = json.load(f)
        
        portfolio_value = data.get('portfolio_value', 0)
        total_return = data.get('total_return', 0)
        total_return_pct = data.get('total_return_pct', 0)
        baseline = 100000
        
        # Calculate risk metrics
        max_loss_threshold = baseline * 0.08  # 8% max loss
        current_loss = abs(min(0, total_return))
        risk_percentage = (current_loss / baseline) * 100
        
        print(f'Portfolio Value: \${portfolio_value:,.2f}')
        print(f'Total Return: \${total_return:,.2f} ({total_return_pct:.2%})')
        print(f'Current Risk: {risk_percentage:.2f}% of baseline')
        print(f'Max Risk Threshold: 8.00% (\${max_loss_threshold:,.2f})')
        
        # Risk alerts
        if current_loss > max_loss_threshold * 0.75:
            print('⚠️  WARNING: Approaching maximum risk threshold!')
            
        if current_loss > max_loss_threshold:
            print('🚨 ALERT: Maximum risk threshold exceeded!')
            print('Consider emergency portfolio review!')
        
        # Position concentration check
        positions = data.get('positions', {})
        if positions:
            print(f'Active Positions: {len(positions)}')
            for symbol, pos in positions.items():
                pnl_pct = pos.get('unrealized_pnl_pct', 0)
                if pnl_pct < -0.15:  # 15% loss on individual position
                    print(f'⚠️  {symbol}: Large loss {pnl_pct:.2%}')
        "
        
    - name: Generate Summary Report
      run: |
        echo "=== Portfolio Summary Report ==="
        echo "Generated: $(date)"
        echo ""
        python -c "
        import json
        from datetime import datetime
        
        with open('docs/latest.json', 'r') as f:
            data = json.load(f)
        
        print('📊 PORTFOLIO SUMMARY')
        print('=' * 50)
        print(f'Portfolio Value: \${data.get(\"portfolio_value\", 0):,.2f}')
        print(f'Cash: \${data.get(\"cash\", 0):,.2f}')
        print(f'Total Return: \${data.get(\"total_return\", 0):,.2f} ({data.get(\"total_return_pct\", 0):.2%})')
        print(f'Active Positions: {data.get(\"positions_count\", 0)}')
        print('')
        
        positions = data.get('positions', {})
        if positions:
            print('📈 INDIVIDUAL POSITIONS')
            print('=' * 50)
            for symbol, pos in positions.items():
                pnl = pos.get('unrealized_pnl', 0)
                pnl_pct = pos.get('unrealized_pnl_pct', 0)
                price = pos.get('current_price', 0)
                print(f'{symbol}: \${price:.2f} | P&L: \${pnl:,.2f} ({pnl_pct:.2%})')
        
        print('')
        print('Last Updated:', data.get('last_update', 'Unknown')[:19])
        "
